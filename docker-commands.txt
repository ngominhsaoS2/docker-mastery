8. Docker Editions: Which Do I Use?
Docker CE (Comunity Editions) and Docker EE (Enterprise Editions)
Three major types of install: Direct, Mac/Win, Cloud
Docker for Windows, Docker for Mac and Docker for AWS/Azure/Google


12. Docker for Mac Setup and Tips
Download and install Docker Desktop for Mac
Intall docker extension on VS Code
Install bash-completion via these instructions:
   - https://docs.docker.com/compose/completion/
   - https://docs.docker.com/docker-for-mac/#install-shell-completion
   - then open another terminal to use it


18. Check Our Docker Install and Config
docker version :check your versions and that docker is working

eg:
saonms-macpro:docker-mastery saonm$ docker version
Client: Docker Engine - Community
 Cloud integration: 1.0.2
 Version:           19.03.13
 API version:       1.40
 Go version:        go1.13.15
 Git commit:        4484c46d9d
 Built:             Wed Sep 16 16:58:31 2020
 OS/Arch:           darwin/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.13
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.13.15
  Git commit:       4484c46d9d
  Built:            Wed Sep 16 17:07:04 2020
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          v1.3.7
  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175
 runc:
  Version:          1.0.0-rc10
  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683


docker info :shows most configuration values for the enging


19. Starting a Nginx Web Server
Image is biraries, libraries, source code ... we want to run
Container is a running instance of an Image
We can have many Containers running based on one Image

docker container run --publish 8888:80 nginx :will do below things:
   - find the Image locally, if does not find, then downloads Image 'nginx' (latest version) from Docker Hub
   - starts a new Container form this Image
   - Opens port 80 on the host IP, --publish (in this case, my mac, my physical mac)
   - routes traffic to the container IP, port 8888
   - then we open browser and go to localhost:8888, it will go to nginx home page

ctrl + C :to stop the container
docker container ls :list all running containers (docker ps)
docker container ls -a :list all containers
docker container stop <container id> :to stop a running container
docker container run always starts a NEW container
docker container start to start an existing stopped container

docker container run --publish 8888:80 --detach --name <container name> nginx :to detach the random name, and name the new container
docker container logs <container name or id> :view container logs
docker container top <container name or id> :list processes of the running container
docker container rm <list container IDs> :remove containers


24. Assignment Answers: Manage Multiple Containers
docker container run -d -p 3307:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql (cuz port 3306 is already used by local mysql app)
docker container run -d --name webserver -p 8080:80 httpd
docker container run -d --name proxy -p 8888:80 nginx (cuz port 80 is already used by local nginx process)

Here is steps to check:
   - curl localhost:8888 (to test nginx)
   - curl localhost:8080 (to test apache/httpd)

docker image ls :list all local Images
-d :it's the short version of --detach. By running in detached mode, we are able to have access to our command line when the container spins up and runs. Without it, we would have logs constantly fed onto the screen.
You didn't specify the -d flag to detach it in the background, and there aren't any logs coming across the screen because you haven't connected to the published port yet, so Nginx has nothing to log about.


25. What's Going On In Containers: CLI Process Monitoring
docker container top :list processes in one Container
docker container inspect :details of one Container configuration
docker container stats :performance stats for all Container


26. Getting a Shell Inside Containers: No Need for SSH
docker container run -it --name proxy nginx bash :to open a terminal after running a new 'nginx' Container
   1/ -t :short for --tty, pseudo-tty, simulates a real terminal, like what SSH does
   2/ -i :short for --interactive, keep session open to receive terminal input
   3/ bash :if run with -it, it will give you a terminal inside the running Container

docker container run -it --name ubuntu ubuntu :run a 'ubuntu' Image, then open a terminal on it (ubuntu Image default CMD is bash, so we dont have specify it)
docker container start -ai ubuntu :start ubuntu container, then open a terminal
docker container exec -it mysql bash :on 'mysql' running container, open a terminal (run additional command in existing Container)
docker pull <image name> :pull an Image from Docker Hub


27. Docker Networks: Concepts for Private and Public Comms in Containers
Each container connected to a private virtual network "bridge"
Each virtual network routes through NAT firewall on host IP
All containers on a virtual network can talk to each other with -p
Best practice is to create a new virtual network for each app:
   - network "my_web_app" for mysql and php/apache Containers
   - network "my_api" for mongo and nodejs Containers

docker container port <container name of id> :display port config of the running container
docker container inspect --format '{{ .NetworkSettings.IPAddress }}' <container name of id> :display the container id on the current virtual network


29. Docker Networks: CLI Management of Virtual Networks
docker network ls :list all current virtual networks
eg:
saonms-macpro:~ saonm$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
6f922a79eb52        bridge              bridge              local
10ec83292d8f        host                host                local
3eaffcd000b5        none                null                local

--network bridge :default docker virtual network, which is NAT'ed behind the Host IP
--network host :it gains performance by skipping virtual networks but sacrifices security of container model
--network none :removes eth0 and only leaves you with localhost interface in container


docker network inspect <network name of id>
eg:
saonms-macpro:~ saonm$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "6f922a79eb520ebd78b7cadbe3cbbd1659c2fc98af80b019adc5f04803976a9b",
        "Created": "2020-11-12T16:15:17.011363034Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": { //saonm: ipconfig. It can be changed.
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": { //saonm: shows all containers connect to this network (container Id, container Name, IPv4, IPv6...)
            "4adbb9a5a0a1b1ddba70177e5337f18fccdc863ac2b04d56099256083c5f39df": {
                "Name": "webhost",
                "EndpointID": "54e37b1b824f1b739237135541db9b6a52e4ebc5386ea454820030e012e711e5",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]


docker network create <name> :create a new virtual network
network driver :built-in or 3rd party extensions that give you virtual network features
docker container run -d --name <container-name> --network <network-name> <image-name>
   --network to specify a virtual network for this container
docker network inspect <network-name> :check containers property to see the above container is attached to this network
docker network connect <network-name> <existing-container> :connect a Container to a Network
docker network disconnect <network-name> <existing-container> :disconnect a Container from a Network
docker container inspect <container-id-name> :then check the Networks property to see all virtual network that the container connects to


30. Docker Networks: DNS and How Containers Find Each Other
docker DNS :docker daemon has a built-in DNS server that containers use by default
docker container exect -it <container-first> ping <container-second> :to test connect from first container to second container (in this case, they are in the same virtual network)

Docker Networks: DNS
Containers should not rely on IP's for inter-communication
DNS for friendly names is built-in if you use custom networks
You're using custom networks right?
This gets way easier with Docker Compose in future section


32. Assignment Answers: Using Containers for CLI Testing
docker container run --rm -it centos:7 bash :to run centos container and open bash terminal
   --rm :automatically remove the container when it exits

35. Assignment Answers: DNS Round Robin Test
We can have multiple containers on a created network respond to the same DNS address
docker network create dude :create a virtual network names "dude"
docker container run -d --net dude --net-alias search elasticsearch:2
   1/ create a container (not give a name), on "dude" virtual network
   2/ --net-alias or --network-alias both work, to set alias names "search" for this container
   3/ Image is "elasticsearch" version 2

Run it 2 times, then we have 2 containers are running on "dude" virtual network, and have Docker Round Robint DNS alias names "search"

Now we test the Docker Round Robint DNS alias names "search" by running nslookup, it will show all nodes (in this case, 2 nodes).
We use alpine to run nslookup:
docker container run --rm --net dude alpine nslookup search 
   1/ --net dude :to join this container to "dude" virtual network
   2/ Image is Alpine, to use nslookup
   3/ nslookup search :finds nodes by using DNS name "search"


37. The Mighty Hub: Using Docker Hub Registry Images
docker pull <image-name>:<version> :to pull an Image from Docker Hub with the given version


38. Images and Their Layers: Discover the Image Cache
docker image history nginx:latest :show layers of changes made in image
   - every layers gets its own uniq SHA, different from other layers, and this SHA will help docker knows if this layer is different from others
   
containers copy files system from Image, then run it. This calls Copy on Write.

eg:
saonms-macpro:~ saonm$ docker image history nginx
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
c39a868aad02        7 days ago          /bin/sh -c #(nop)  CMD ["nginx" "-g" "daemon…   0B                  
<missing>           7 days ago          /bin/sh -c #(nop)  STOPSIGNAL SIGTERM           0B                  
<missing>           7 days ago          /bin/sh -c #(nop)  EXPOSE 80                    0B                  
<missing>           7 days ago          /bin/sh -c #(nop)  ENTRYPOINT ["/docker-entr…   0B                  
<missing>           7 days ago          /bin/sh -c #(nop) COPY file:0fd5fca330dcd6a7…   1.04kB              
<missing>           7 days ago          /bin/sh -c #(nop) COPY file:13577a83b18ff90a…   1.96kB              
<missing>           7 days ago          /bin/sh -c #(nop) COPY file:e7e183879c35719c…   1.2kB               
<missing>           7 days ago          /bin/sh -c set -x     && addgroup --system -…   63.6MB              
<missing>           7 days ago          /bin/sh -c #(nop)  ENV PKG_RELEASE=1~buster     0B                  
<missing>           7 days ago          /bin/sh -c #(nop)  ENV NJS_VERSION=0.4.4        0B                  
<missing>           7 days ago          /bin/sh -c #(nop)  ENV NGINX_VERSION=1.19.4     0B                  
<missing>           4 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=NGINX Do…   0B                  
<missing>           4 weeks ago         /bin/sh -c #(nop)  CMD ["bash"]                 0B                  
<missing>           4 weeks ago         /bin/sh -c #(nop) ADD file:0dc53e7886c35bc21…   69.2MB       

My "nginx" image is c39a868aad02 layer. Other layers belong to the Image itself.


docker image inspect <image-name-or-id> :show all info of the Image
eg:
saonms-macpro:~ saonm$ docker image inspect nginx
[
    {
        "Id": "sha256:c39a868aad02a383c7e490e0fc4a5b0217f667f2de764bc2755e315a5adf64a1",
        "RepoTags": [
            "nginx:latest"
        ],
        "RepoDigests": [
            "nginx@sha256:aeade65e99e5d5e7ce162833636f692354c227ff438556e5f3ed0335b7cc2f1b"
        ],
        "Parent": "",
        "Comment": "",
        "Created": "2020-11-05T18:21:10.923474978Z",
        "Container": "16434ccbe2eab08b0e7e63149c390b8a346c8cf92899ba6063c1b2653628f3c1",
        "ContainerConfig": {
            "Hostname": "16434ccbe2ea",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": { //saonm: ports are opened.
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [ //saonm: Environment Variables
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.19.4",
                "NJS_VERSION=0.4.4",
                "PKG_RELEASE=1~buster"
            ],
            "Cmd": [
                "/bin/sh",
                "-c",
                "#(nop) ",
                "CMD [\"nginx\" \"-g\" \"daemon off;\"]" //saonm: the command it would run when start containers by default
            ],
            "Image": "sha256:39d1a217abc58e72f1b21274ba555decbceb7e33d04ebf2ca1c605bf85328de8",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGTERM"
        },
        "DockerVersion": "19.03.12",
        "Author": "",
        "Config": {
            "Hostname": "",
            "Domainname": "",
            "User": "",
            "AttachStdin": false,
            "AttachStdout": false,
            "AttachStderr": false,
            "ExposedPorts": {
                "80/tcp": {}
            },
            "Tty": false,
            "OpenStdin": false,
            "StdinOnce": false,
            "Env": [
                "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
                "NGINX_VERSION=1.19.4",
                "NJS_VERSION=0.4.4",
                "PKG_RELEASE=1~buster"
            ],
            "Cmd": [
                "nginx",
                "-g",
                "daemon off;"
            ],
            "Image": "sha256:39d1a217abc58e72f1b21274ba555decbceb7e33d04ebf2ca1c605bf85328de8",
            "Volumes": null,
            "WorkingDir": "",
            "Entrypoint": [
                "/docker-entrypoint.sh"
            ],
            "OnBuild": null,
            "Labels": {
                "maintainer": "NGINX Docker Maintainers <docker-maint@nginx.com>"
            },
            "StopSignal": "SIGTERM"
        },
        "Architecture": "amd64",
        "Os": "linux",
        "Size": 132865518,
        "VirtualSize": 132865518,
        "GraphDriver": {
            "Data": {
                "LowerDir": "/var/lib/docker/overlay2/a309c0b51c36e72dc3e6d73e2037c8f9649c0c23d3f5d2a8168891b44bfa1759/diff:/var/lib/docker/overlay2/f0d674cf10593a7bd7fb5998b7e7fdff3b014c318a720c4884bbc55a3af67d89/diff:/var/lib/docker/overlay2/1d596f92ec85f8547dc1406ff08204e8aaafdadcaec066c78bafa521cfd5a4d4/diff:/var/lib/docker/overlay2/1c21a8c55aa032e04a01984cc1c546137f28b299d0572e8a63568b15023a253a/diff",
                "MergedDir": "/var/lib/docker/overlay2/17412dbb386526c1d8919cc0596a880d2d0f2d95cf8d8c1da6427d1ffece11c9/merged",
                "UpperDir": "/var/lib/docker/overlay2/17412dbb386526c1d8919cc0596a880d2d0f2d95cf8d8c1da6427d1ffece11c9/diff",
                "WorkDir": "/var/lib/docker/overlay2/17412dbb386526c1d8919cc0596a880d2d0f2d95cf8d8c1da6427d1ffece11c9/work"
            },
            "Name": "overlay2"
        },
        "RootFS": {
            "Type": "layers",
            "Layers": [
                "sha256:d0fe97fa8b8cefdffcef1d62b65aba51a6c87b6679628a2b50fc6a7a579f764c",
                "sha256:2baf69a23d7a7ec2c54aa4b3371989d82c1031bae757baafb336fc3a21501683",
                "sha256:2f57e21e4365db3a235bc19cd9cde503036486e1bea40e96f7374b0f4c97675b",
                "sha256:aee208b6ccfbd287b27a355829ee65d873184f4bd4a844d39f00af77810b7cc4",
                "sha256:7b5417cae114bdeed27f524ccaf3be8506ed5fceba3a17aabe268aca8861bd55"
            ]
        },
        "Metadata": {
            "LastTagTime": "0001-01-01T00:00:00Z"
        }
    }
]


39. Image Tagging and Pushing to Docker Hub
docker image tag <soure-image:tag> <target-image:tag> :create a new tag
eg:
saonms-macpro:~ saonm$ docker image ls
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
nginx                latest              c39a868aad02        8 days ago          133MB
saonm/nginx          latest              c39a868aad02        8 days ago          133MB
ubuntu               latest              d70eaf7277ea        3 weeks ago         72.9MB
mysql                latest              db2b37ec6181        3 weeks ago         545MB
alpine               latest              d6e46aa2470d        3 weeks ago         5.57MB
mysql/mysql-server   latest              c8552d79a138        3 weeks ago         405MB
httpd                latest              3dd970e6b110        4 weeks ago         138MB

We can see nginx and saonm/nginx have the same Image Id

docker image push <repository>:<tag> :to push Image to Docker Hub with the given tag


44. Assignment Answers: Build Your Own Dockerfile and Run Containers From It

Explain things on Dockerfile:

FROM node:6-alpine :it starts with this image, nodejs with alpine
EXPOSE 3000 :open port 3000 on the host machine, not on the container
WORKDIR /usr/src/app :change working directory of container to this directory, using WORKDIR is preferred to using 'RUN cd /some/path'
RUN npm install && npm cache clean :run first command, if succeeds, run the second command
RUN npm install; npm cache clean :run both commands at the sametime, parallel
COPY . . :copy from current working directory of host to the working directory of container, in this case, it is /usr/src/app because we run WORKDIR /usr/src/app above
CMD ["tini", "--", "node", "./bin/www"] :to execute this command '/sbin/tini -- node ./bin/www'


docker build -t <tagname> <directory> :build an Image with the given tag on the directory
docker container run --rm -p 8888:3000 testnode :node run on port 3000, so we direct from host port 8888 to container port 3000


46. Container Lifetime & Persistent Data
Containers are usually immutable (can not be changed) and ephemeral (transient)
"immutable infrastructure": we dont change the container when it's running, just re-deploy it then run again.
Containers should not contain databases, unique data...
This is known as "persistent data"
Docker provides two ways:
   - volumes: make special location outside of container UFS (union file system) to store these "persistent data", can be attached to whatever container.
   - bind mounts: link container to host path


47. Persistent Data: Data Volumes
docker image inspect <image> :to see all details of Image, and see this "Volumes" property
eg:
"Volumes": {
    "/var/lib/mysql": {}
},

We can see the same thing when we inspect a container, it also has "Volumes" property.
We can also see "Mounts" property.

eg:
"Volumes": {
    "/var/lib/mysql": {}
},

"Mounts": [
    {
        "Type": "volume",
        "Name": "5b5494e7718d4c23d47f194065f0bc07f1d43459e4adb16ff81fb323ce46dd5a",
        "Source": "/var/lib/docker/volumes/5b5494e7718d4c23d47f194065f0bc07f1d43459e4adb16ff81fb323ce46dd5a/_data",
        "Destination": "/var/lib/mysql",
        "Driver": "local",
        "Mode": "",
        "RW": true,
        "Propagation": ""
    }
],

The container gets its own unique location on the host to store data.
In the background, docker maps/mounts the data to the container, from "Source" (on the actual host) to "Destination" (on the container)


docker volume ls :displays all existing volumes.
docker volume inspect <volumename> :see all details of the volume.
eg:
saonms-macpro:~ saonm$ docker volume inspect 5b5494e7718d4c23d47f194065f0bc07f1d43459e4adb16ff81fb323ce46dd5a 
[
    {
        "CreatedAt": "2020-11-15T10:04:06Z",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/5b5494e7718d4c23d47f194065f0bc07f1d43459e4adb16ff81fb323ce46dd5a/_data",
        "Name": "5b5494e7718d4c23d47f194065f0bc07f1d43459e4adb16ff81fb323ce46dd5a",
        "Options": null,
        "Scope": "local"
    }
]

docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=true -v <volume-name>:<path-on-container> mysql
   1/ -v to name the volume for this container, either creating a new one or using the existing one
   2/ volume-name and path-on-container are both required

Remove container, does not remove its volume


49. Persistent Data: Bind Mounting
docker container run -d --name nginx -p 8888:80 -v $(pwd):/usr/share/nginx/html nginx
   -v to bind content on pwd to /usr/share/nginx/html folder on the container.